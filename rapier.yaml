title: Shipyard Deployment API
version: "0.1"
consumes: application/json
produces: application/json text/html
conventions:
  queryPathSelectorLocation: pathSegment
  useEtag: False
  patchConsumes: application/merge-patch+json
  errorResponse:
    type: string
entities:
  Shipyard:
    wellKnownURLs: /
    queryPaths:
    - environments
    properties:
      isA:
        type: string
        enum: [Shipyard]
      environments:
        type: string
        format: uri
        relationship:
          entities: '#Environment'
          multiplicity: n
          collectionResource: '#Collection'
          usage: c        
    readOnly: true
  Environment:
    properties:
      isA:
        type: string
        enum: [Environment]
      sharingSet:
        type: string
        format: uri
        usage: c r #write once, read many
      name:
        type: string
        usage: c r #write once, read many
      publicSecret:
        type: string
        readOnly: true
      privateSecret:
        type: string
        readOnly: true
      hostnames:
        type: array
        items:
          type: string
      deployments:
        type: string
        format: uri
        relationship:
          entities: '#Deployment'
          multiplicity: n
          collectionResource: '#Collection'
    queryPaths: deployments deployments;{name}
    permalinkTemplate: /environments/{sharingSetName-envName} 
  Deployment:
    properties:
      isA:
        type: string
        enum: [Deployment]
      name:
        type: string
        usage: c r #write once, read many
      deploymentName:
        type: string
        description: Name of deployment to be created
      trafficHosts: 
        type: string
        description: Where deployment object is routed
      publicPaths:
        type: string
        description: Path of deployment
      replicas:
        type: integer
        description: How many replicas to be deployed
      environment:
        type: string
        format: uri
        relationship: '#Environment'
        usage: c r #write once, read many
      podTemplateSpec:
        description: Pod Template Spec. could be a URL or an in-line PTS       
        oneOf:
        - type: string
          format: uri
        - $ref: '#/entities/PodTemplateSpec'
  PodTemplateSpec:
    type: object          
    # should probably say more
  Collection:
    allOf:
    - $ref: '#/entities/Resource'
    properties:
      isA:
        type: string
        enum: [Collection]
      contents:
        type: array
        items: 
          type: object
    readOnly: true
  Resource:
    type: object
    properties:
      _self:
        type: string
        readOnly: true
      isA:
        type: string
securityDefinitions:
  sso:
    type: oauth2
    scopes: {}
    flow: application
    tokenUrl: whatever
security:
- sso: []
